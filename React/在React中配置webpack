首先，运行

`yarn run eject`

将配置文件暴露出来

### 一. 配置预编译器（以less为例）

- 安装`less-loader`，`less`

  ```javascript
  yarn add less-loader less
  ```

- 目前的 `create-react-app` 的`webpack`配置默认支持 `css` 和 `sass`。

- 打开 `webpack.config.js`，加上以下配置即可。

  ```javascript
  {
      test: lessRegex,
      exclude: lessModuleRegex,
      use: getStyleLoaders(
          {
            importLoaders: 2,
            sourceMap: isEnvProduction && shouldUseSourceMap,
          },
          'less-loader'
      ),
      sideEffects: true,
  },
  {
      test: lessModuleRegex,
      use: getStyleLoaders(
          {
            importLoaders: 2,
            sourceMap: isEnvProduction && shouldUseSourceMap,
            modules: true,
            getLocalIdent: getCSSModuleLocalIdent,
          },
          'less-loader'
      ),
  }
  ```

  

### 三. 配置`antd`按需加载

- 使用antd

  - 安装antd

    ```javascript
    yarn add antd
    ```

  - 使用

    ```javascript
    import { Button } from 'antd'
    import 'antd/dist/antd.css'
    ```

- webpack实现按需加载

  参考：https://ant.design/docs/react/use-with-create-react-app-cn

  - 安装 babel-plugin-import

    ```javascript
    yarn add babel-plugin-import
    ```

  - 配置

    ```javascript
    if (preProcessor) {
      if (preProcessor === 'less-loader') {
        loaders.push(
          {
            loader: require.resolve('less-loader'),
            options: {
              javascriptEnabled: true,
              suorcrMap: true,
              modules: false,
              modifyVars: {
                '@primary-color': '#1dbf93'
                // '@primary-color': '#32A1B3'
              }
            }
          }
        )
      }
    ```

    

    ```javascript
     {
      test: /\.(js|mjs|jsx|ts|tsx)$/,
      include: paths.appSrc,
      loader: require.resolve('babel-loader'),
      options: {
        customize: require.resolve(
          'babel-preset-react-app/webpack-overrides'
        ),
    
        plugins: [
          [
            'import',
            {
              'libraryName': 'antd',
              'style': true // 动态编译
            }
          ],
          [
            require.resolve('babel-plugin-named-asset-import'),
            {
              loaderMap: {
                svg: {
                  ReactComponent:
                    '@svgr/webpack?-svgo,+titleProp,+ref![path]',
                },
              },
            },
          ],
        ],
        // This is a feature of `babel-loader` for webpack (not Babel itself).
        // It enables caching results in ./node_modules/.cache/babel-loader/
        // directory for faster rebuilds.
        cacheDirectory: true,
        cacheCompression: isEnvProduction,
        compact: isEnvProduction,
      },
    },
    ```

    此时，我们可以去掉组件中的样式引入了。

    我们实现了antd的按需加载，并且可以定制antd主题色等功能。

### 四. 配置移动端`vw`适配

### 五. 配置代码分割

- 作用：动态加载代码，提高加载性能，减少加载时间。
- 场景： 我们使用`webpack`打包时，是将多个模块合并为一个。当项目体积增大或是用了很大的包时，我们可以用到代码分割。
- 粒度：和组件一样，代码分割需要注意粒度。
- 分割方法：
  - 入口起点：使用 `entry` 配置手动地分离代码。
  - 动态导入：通过模块的内联函数调用来分离代码。
  - 使用插件手动分离。



​	

